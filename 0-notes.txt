SOURCE 1: https://scrimba.com/learn/typescript
SOURCE 2: https://www.youtube.com/watch?v=BCg4U1FzODs

1/ INTRO

- TypeScript is an open-source language which is builds on JavaScripts

- Why is it considered as a super set of JavaScripts? It takes JS and add more features to it, meaning existing JS programs are also valid TS programs

- Developed and maintained by Microsoft

- Attributes
  + Validate if your code is woring properly
  + Writing Types is Optional
  + Client and Sever-side development
  + Transcompile to JavaScripts
  ! Browsers cannot compile TS 

- Pros: help code to have less errors, to be cleaner and more readable; it is optional, both sides development, no need for pseudocode

- The only con like SASS: needs to be compiled to JavaScript

2/ JS TYPES
// Primitives:
- Boolean : typeof instance === "boolean"
- Number : typeof instance === "number"
- String : typeof instance === "string"
- BigInt : typeof instance === "bigint"
- Symbol : typeof instance === "symbol"
- undefined : typeof instance === "undefined" 
- Structural Types:
- Object : typeof instance === "object"
- Function : typeof instance === "function" 
- Structural Root Primitive:
- null : typeof instance === "object"

3/ 'interface' vs. 'type'
- You cannot use 'interface' for Primitive types, that's it :)
- Example: interface Point = number | string -> error

4/ The '?' symbol
- So for interfaces, we have to implement all the attributes that it has, otherwise errors
- To set an attribute as OPTIONAL, just put a '?' next to it
- Example: interface i {name: string, age?: number} -> we do not HAVE TO init 'age' at usage

5/ 'readonly' 
- Make an attribute in an interface to be read-only (CANNOT MOFIFIDED)
- Example: interface i {readonly name: string, age?: number}