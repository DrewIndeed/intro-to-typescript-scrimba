SOURCE 1: https://scrimba.com/learn/typescript
SOURCE 2: https://www.youtube.com/watch?v=BCg4U1FzODs
SOURCE 3: https://refactoring.guru/design-patterns (FOLDERS THAT ARE RELATED TO DESIGN PATTERS ARE FROM THIS SOURCE)

0/ HOW TO COMPILE TYPESCRIPT AND RUN (from source 2)

- For this repo ONLY, that i installed TS globally through npm i -g typescript

- Before having a config file for TS, you can just 'tsc [filename_here]' and a .js file with the same name will be created in the same level of directory

- Now, we want to separate TS and JS files in different folder, we can specify the route for those file in a TS config file
- To create a new TS config file, 'tsc --init'. Then, create 2 new folder, 1 called src and 1 called dist
- In config file, "outDir": "./dist" and "rootDir": "./src"
- To compile, just 'tsc' in the terminal and it will follow what has been specified in the config file

1/ INTRO

- TypeScript is an open-source language which is builds on JavaScripts

- Why is it considered as a super set of JavaScripts? It takes JS and add more features to it, meaning existing JS programs are also valid TS programs

- Developed and maintained by Microsoft

- Attributes
  + Validate if your code is working properly
  + Writing Types is Optional
  + Client and Sever-side development
  + Transcompile to JavaScripts
  ! Browsers cannot compile TS 

- Pros: help code to have less errors, to be cleaner and more readable; it is optional, both sides development, no need for pseudocode

- The only con like SASS: needs to be compiled to JavaScript

2/ JS TYPES
// Primitives:
- Boolean : typeof instance === "boolean"
- Number : typeof instance === "number"
- String : typeof instance === "string"
- BigInt : typeof instance === "bigint"
- Symbol : typeof instance === "symbol"
- undefined : typeof instance === "undefined" 

// Structural Types:
- Object : typeof instance === "object"
- Function : typeof instance === "function" 

// Structural Root Primitive:
- null : typeof instance === "object"

3/ 'interface' vs. 'type'
- Read this for more details: https://stackoverflow.com/questions/37233735/interfaces-vs-types-in-typescript

4/ The '?' symbol
- So for interfaces, we have to implement all the attributes that it has, otherwise errors
- To set an attribute as OPTIONAL, just put a '?' next to it
- Example: interface i {name: string, age?: number} -> we do not HAVE TO init 'age' at usage

5/ 'readonly' 
- Make an attribute in an interface to be read-only (CANNOT MOFIFIDED)
- Example: interface i {readonly name: string, age?: number}

6/ Class attributes modifiders
- Default (without writing anything before attribute) is 'public'
- 'protected': can only access that extends further the current class
- 'private': can only access in the current class

--------------------------------------------------------------------------------------------------------------------------------
(CONTINUE LEARNING FROM SOURCE 1)
7/ Learn primitive types - Type assignment and Type interference
- let age                 -> TS says age is any type
- let age = 23            -> TS says age is number type
- const age = 23          -> TS says age is 23, constant that's it
- const age: number = 23  -> This is REDUNDANT, because TS already knows age is number type -> TYPE INTERFERENCE (meaning knowing that type of that variables' values)
  + So when should we do this? When a variable is not assinged to anything: let isLoyal, thats it. isLoyal now will have the type of any, so we need to ASSIGN TYPE FOR IT.